cmake_minimum_required(VERSION 3.29)
project(nes_frontend)

set(CMAKE_CXX_STANDARD "11")



# functions defination

function(disable_target_warnings NAME)
  if(MSVC)
    target_compile_options(${NAME} PRIVATE "/W0")
  elseif("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang$"
         OR "${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    target_compile_options(${NAME} PRIVATE "-w")
  endif()
endfunction()


# todo only regenerate ub file if one of the input files changed hack alert
function(enable_unity_build UB_SUFFIX SOURCE_VARIABLE_NAME)
  set(files ${${SOURCE_VARIABLE_NAME}})

  # Generate a unique filename for the unity build translation unit
  set(unit_build_file ${CMAKE_CURRENT_BINARY_DIR}/ub_${UB_SUFFIX}.cpp)
  set(temp_unit_build_file ${CMAKE_CURRENT_BINARY_DIR}/ub_${UB_SUFFIX}.cpp.tmp)
  # Exclude all translation units from compilation
  set_source_files_properties(${files} PROPERTIES HEADER_FILE_ONLY true)

  set(rebuild FALSE)
  # check if any of the source files have changed
  foreach(source_file ${files})
    if(${CMAKE_CURRENT_SOURCE_DIR}/${source_file} IS_NEWER_THAN
       ${unit_build_file})
      set(rebuild TRUE)
    endif()
  endforeach(source_file)
  # write a temporary file
  file(WRITE ${temp_unit_build_file} "// Unity Build generated by CMake\n")
  foreach(source_file ${files})
    file(
      APPEND ${temp_unit_build_file}
      "#include <${CMAKE_CURRENT_SOURCE_DIR}/${source_file}>\n"
    )
  endforeach(source_file)

  execute_process(
    COMMAND ${CMAKE_COMMAND} -E compare_files ${unit_build_file}
            ${temp_unit_build_file}
    RESULT_VARIABLE compare_result
    OUTPUT_VARIABLE bla
    ERROR_VARIABLE bla)
  if(compare_result EQUAL 0)
    # files are identical: do nothing
  elseif(compare_result EQUAL 1)
    # files are different: rebuild
    set(rebuild TRUE)
  else()
    # error while compiling: rebuild
    set(rebuild TRUE)
  endif()

  if(${rebuild})
    file(WRITE ${unit_build_file} "// Unity Build generated by CMake\n")
    foreach(source_file ${files})
      file(
        APPEND ${unit_build_file}
        "#include <${CMAKE_CURRENT_SOURCE_DIR}/${source_file}>\n"
      )
    endforeach(source_file)
  endif()

  # Complement list of translation units with the name of ub
  set(${SOURCE_VARIABLE_NAME}
      ${${SOURCE_VARIABLE_NAME}} ${unit_build_file}
      PARENT_SCOPE)
endfunction(enable_unity_build)


function(add_extension_definitions)
  include_directories(${PROJECT_SOURCE_DIR}/extension)
  if(NOT "${TEST_WITH_LOADABLE_EXTENSION}" STREQUAL "")
    string(REPLACE ";"  "," COMMA_SEPARATED_EXTENSIONS "${TEST_WITH_LOADABLE_EXTENSION}")
    # Note: weird commas are for easy substring matching in c++
    add_definitions(-DDUCKDB_EXTENSIONS_TEST_WITH_LOADABLE=\",${COMMA_SEPARATED_EXTENSIONS},\")
    add_definitions(-DDUCKDB_EXTENSIONS_BUILD_PATH="${CMAKE_BINARY_DIR}/extension")
  endif()
  if(NOT("${TEST_REMOTE_INSTALL}" STREQUAL "OFF"))
    add_definitions(-DDUCKDB_TEST_REMOTE_INSTALL="${TEST_REMOTE_INSTALL}")
  endif()

  if(${DISABLE_BUILTIN_EXTENSIONS})
    add_definitions(-DDISABLE_BUILTIN_EXTENSIONS=${DISABLE_BUILTIN_EXTENSIONS})
  endif()

  # Include paths for any registered out-of-tree extensions
  foreach(EXT_NAME IN LISTS DUCKDB_EXTENSION_NAMES)
    string(TOUPPER ${EXT_NAME} EXT_NAME_UPPERCASE)
    if(${DUCKDB_EXTENSION_${EXT_NAME_UPPERCASE}_SHOULD_LINK})
      add_definitions(-DDUCKDB_EXTENSION_${EXT_NAME_UPPERCASE}_LINKED=1)
      if (DEFINED DUCKDB_EXTENSION_${EXT_NAME_UPPERCASE}_INCLUDE_PATH)
        include_directories("${DUCKDB_EXTENSION_${EXT_NAME_UPPERCASE}_INCLUDE_PATH}")
      else()
        # We try the default locations for headers
        include_directories("${PROJECT_SOURCE_DIR}/extension_external/${EXT_NAME}/src/include")
        include_directories("${PROJECT_SOURCE_DIR}/extension_external/${EXT_NAME}/include")
      endif()
    endif()
  endforeach()
endfunction()

option(DISABLE_UNITY "Disable unity builds." FALSE)

function(add_library_unity NAME MODE)
  set(SRCS ${ARGN})
  if(NOT DISABLE_UNITY)
    enable_unity_build(${NAME} SRCS)
  endif()
  add_library(${NAME} OBJECT ${SRCS})
endfunction()


include_directories(third_party/re2)
include_directories(src/include)
include_directories(third_party/utf8proc/include)
include_directories(third_party/fmt/include)
include_directories(third_party/fsst)
include_directories(third_party/miniz)
include_directories(third_party/pcg)
include_directories(third_party/jaro_winkler)
include_directories(third_party/yyjson/include)
include_directories(third_party/hyperloglog)
include_directories(third_party/concurrentqueue)
include_directories(third_party/fast_float)
include_directories(third_party/fastpforlib)
add_subdirectory(src)
add_subdirectory(third_party)


# include_directories(src/bin)

add_executable(playground src/bin/playground.cpp)


target_link_libraries(playground duckdb_common)
target_link_libraries(playground duckdb_pg_query)
target_link_libraries(playground duckdb_parser)
target_link_libraries(playground duckdb_utf8proc)
target_link_libraries(playground duckdb_fmt)
target_link_libraries(playground duckdb_fsst)
target_link_libraries(playground duckdb_miniz)
target_link_libraries(playground duckdb_re2)
target_link_libraries(playground duckdb_function)
target_link_libraries(playground duckdb_query_node)
target_link_libraries(playground duckdb_parsed_data)
target_link_libraries(playground duckdb_planner)
target_link_libraries(playground duckdb_common_tree_renderer)
target_link_libraries(playground duckdb_common_serializer)
target_link_libraries(playground duckdb_storage_serialization)
target_link_libraries(playground duckdb_parser_tableref)
target_link_libraries(playground duckdb_planner_operator)
target_link_libraries(playground duckdb_func_scalar)
target_link_libraries(playground duckdb_statement)
target_link_libraries(playground duckdb_expression)
target_link_libraries(playground duckdb_yyjson)
target_link_libraries(playground duckdb_common_types)
target_link_libraries(playground duckdb_hyperloglog)
target_link_libraries(playground duckdb_main)
target_link_libraries(playground duckdb_storage_buffer)
target_link_libraries(playground duckdb_catalog)
target_link_libraries(playground duckdb_func_scalar)
target_link_libraries(playground duckdb_expression_binders)
target_link_libraries(playground duckdb_main_secret)
target_link_libraries(playground duckdb_common_types_column)
target_link_libraries(playground duckdb_common_types_row)
target_link_libraries(playground duckdb_optimizer)
target_link_libraries(playground duckdb_catalog_entries)
target_link_libraries(playground duckdb_expression_binders)
target_link_libraries(playground duckdb_func_string_main)
target_link_libraries(playground duckdb_storage)
target_link_libraries(playground duckdb_common_operators)
target_link_libraries(playground duckdb_fastpforlib)
target_link_libraries(playground duckdb_storage_compression)
target_link_libraries(playground duckdb_bind_statement)
target_link_libraries(playground duckdb_main_settings)
target_link_libraries(playground duckdb_optimizer_rules)
target_link_libraries(playground duckdb_optimizer_compressed_materialization)
target_link_libraries(playground duckdb_planner_expression)
target_link_libraries(playground duckdb_storage_table)
target_link_libraries(playground duckdb_common_enums)
target_link_libraries(playground duckdb_storage_statistics)
target_link_libraries(playground duckdb_execution_index_art)
target_link_libraries(playground duckdb_planner_filter)
target_link_libraries(playground duckdb_parallel)
target_link_libraries(playground duckdb_func_ops_main)
target_link_libraries(playground duckdb_main_relation)
target_link_libraries(playground duckdb_catalog_default_entries)
target_link_libraries(playground duckdb_constraints)
target_link_libraries(playground duckdb_optimizer_statistics_expr)
target_link_libraries(playground duckdb_main_relation)
target_link_libraries(playground duckdb_execution)
target_link_libraries(playground duckdb_func_compressed_materialization)
target_link_libraries(playground duckdb_optimizer)
target_link_libraries(playground duckdb_physical_plan)
